(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{421:function(n,e,t){"use strict";t.r(e);var s=t(2),a=Object(s.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"title"}),e("p",[n._v("随着前端变革，Nginx也成为了前端开发工程师必不可少应该具备的一项技能了，那nginx到底起的是吗作用？其实Nginx一直跟我们息息相关，它既可以作为 Web 服务器，也可以作为负载均衡服务器，具备高性能、高并发连接等")])]),e("h2",{attrs:{id:"负载均衡"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡"}},[n._v("#")]),n._v(" 负载均衡 "),e("br")]),n._v(" "),e("p",[n._v("当一个应用单位时间内访问量激增，服务器的带宽及性能受到影响，影响大到自身承受能力时，服务器就会宕机奔溃，为了防止这种现象发生，以及实现更好的用户体验，我们可以通过配置Nginx负载均衡的方式来分担服务器压力")]),n._v(" "),e("p",[n._v("当有一台服务器宕机时，负载均衡器就分配其他的服务器给用户，极大的增加的网站的稳定性 当用户访问web时候，首先访问到的是负载均衡器，再通过负载均衡器将请求转发给后台服务器")]),n._v(" "),e("h3",{attrs:{id:"负载均衡的几种常用方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡的几种常用方式"}},[n._v("#")]),n._v(" "),e("strong",[n._v("负载均衡的几种常用方式")])]),n._v(" "),e("ul",[e("li",[e("strong",[n._v("轮询（默认）")])])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// nginx.config\nupstream backserver {\n    server 192.168.0.1;\n    server 192.168.0.2;\n}\n")])])]),e("ul",[e("li",[e("strong",[n._v("权重weight")])])]),n._v(" "),e("p",[n._v("指定不同ip的权重，权重与访问比成正相关，权重越高，访问越大，适用于不同性能的机器")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// nginx.config\nupstream backserver {\n    server 192.168.0.1 weight=2;\n    server 192.168.0.2 weight=8;\n}\n")])])]),e("ul",[e("li",[e("strong",[n._v("响应时间来分配")])])]),n._v(" "),e("p",[n._v("公平竞争，谁相应快，谁处理，不过这种方式需要依赖到第三方插件nginx-upstream-fair，需要先安装")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// nginx.config\nupstream backserver {\n    server 192.168.0.1;\n    server 192.168.0.2;\n    fair;\n}\nserver {\n    listen 80;\n    server_name localhost; \n    location / {\n      proxy_pass  http://backserver;\n    }\n}\n")])])]),e("h3",{attrs:{id:"健康检查"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#健康检查"}},[n._v("#")]),n._v(" "),e("strong",[n._v("健康检查")])]),n._v(" "),e("p",[n._v("Nginx 自带 ngx_http_upstream_module（健康检测模块）本质上服务器心跳的检查，通过定期轮询向集群里的服务器发送健康检查请求,来检查集群中是否有服务器处于异常状态\n如果检测出其中某台服务器异常,那么在通过客户端请求nginx反向代理进来的都不会被发送到该服务器上（直至下次轮训健康检查正常）")]),n._v(" "),e("p",[n._v("基本例子如下👇")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("upstream backserver{\n    server 192.168.0.1  max_fails=1 fail_timeout=40s;\n    server 192.168.0.2  max_fails=1 fail_timeout=40s;\n}\n\nserver {\n    listen 80;\n    server_name localhost;\n    location / {\n      proxy_pass http://backend;\n    }\n}\n")])])]),e("p",[n._v("涉及两个配置：")]),n._v(" "),e("ul",[e("li",[n._v("fail_timeout : 设定服务器被认为不可用的时间段以及统计失败尝试次数的时间段，默认为10s")]),n._v(" "),e("li",[n._v("max_fails : 设定Nginx与服务器通信的尝试失败的次数，默认为：1次")])]),n._v(" "),e("h2",{attrs:{id:"反向代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#反向代理"}},[n._v("#")]),n._v(" "),e("strong",[n._v("反向代理")])]),n._v(" "),e("p",[n._v("反向代理指的是，当一个客户端发送的请求,想要访问服务器上的内容，但将被该请求先发送到一个代理服务器proxy,这个代理服务器（Nginx）将把请求代理到和自己属于同一个局域网下的内部服务器上,而用户通过客户端真正想获得的内容就存储在这些内部服务器上，此时Nginx代理服务器承担的角色就是一个中间人，起到分配和沟通的作用")]),n._v(" "),e("ul",[e("li",[e("p",[e("strong",[n._v("为什么需要反向代理?")])]),n._v(" "),e("ul",[e("li",[n._v("防火墙作用"),e("br"),n._v("\n当你的应用不想直接暴露给客户端（也就是客户端无法直接通过请求访问真正的服务器，只能通过Nginx），通过nginx过滤掉没有权限或者非法的请求，来保障内部服务器的安全")]),n._v(" "),e("li",[n._v("负载均衡"),e("br"),n._v('\n本质上负载均衡就是反向代理的一种应用场景，可以通过nginx将接收到的客户端请求"均匀地"分配到这个集群中所有的服务器上(具体看负载均衡方式),从而实现服务器压力的负载均衡')])])]),n._v(" "),e("li",[e("p",[e("strong",[n._v("如何使用反向代理")])])])]),n._v(" "),e("p",[n._v("我们通过模拟内部服务器的端口启动的nodejs项目设置反向代理到80端口访问")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// nginx.config\nserver  {\n  listen 80;\n  server_name localhost;\n  location / {\n    proxy_pass http://127.0.0.1:8000;（upstream）\n  }\n}\n")])])]),e("p",[n._v("在 Nginx 反向代理是，会通过 location 功能匹配指定的 URI，然后把接收到的符合匹配 URI的请求通过 proxy_pass 转移给之前定义好的 upstream 节点池")]),n._v(" "),e("h3",{attrs:{id:"https配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#https配置"}},[n._v("#")]),n._v(" "),e("strong",[n._v("Https配置")])]),n._v(" "),e("p",[n._v("Nginx 常用来配置Https认证，主要有两个步骤：签署第三方可信任的 SSL 证书 和 配置 HTTPS")]),n._v(" "),e("ul",[e("li",[e("strong",[n._v("签署第三方可信任的 SSL")])])]),n._v(" "),e("p",[n._v("配置 HTTPS 要用到私钥 example.key 文件和 example.crt 证书文件，而申请证书文件的时候要用到 example.csr 文件。")]),n._v(" "),e("ul",[e("li",[e("strong",[n._v("Nginx配置https")])])]),n._v(" "),e("p",[n._v("要开启 HTTPS 服务，在配置文件信息块(server)，必须使用监听命令 listen 的 ssl 参数和定义服务器证书文件和私钥文件，如下所示：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("\nserver {\n   #ssl参数\n   listen              443 ssl; //监听443端口，因为443端口是https的默认端口。80为http的默认端口\n   server_name         example.com;\n   #证书文件\n   ssl_certificate     example.com.crt;\n   #私钥文件\n   ssl_certificate_key example.com.key;\n}\n")])])]),e("ul",[e("li",[n._v("ssl_certificate:证书的绝对路径")]),n._v(" "),e("li",[n._v("ssl_certificate_key:  密钥的绝对路径;")])]),n._v(" "),e("h2",{attrs:{id:"常用的配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用的配置"}},[n._v("#")]),n._v(" "),e("strong",[n._v("常用的配置")])]),n._v(" "),e("ul",[e("li",[e("strong",[n._v("IP白名单")])])]),n._v(" "),e("p",[n._v("可以配置nginx的白名单，规定有哪些ip可以访问你的服务器，防爬虫必备")]),n._v(" "),e("ol",[e("li",[n._v("简单配置")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("server {\n      location / {\n          deny  192.168.0.1; // 禁止该ip访问\n          deny  all; // 禁止所有\n      }\n}\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[n._v("白名单配置")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("建立白名单 vim /etc/nginx/white_ip.conf\n ...\n192.168.0.1 1;\n ...\n复制代码\n修改nginx配置(nginx.conf)geo $remote_addr $ip_whitelist{\n    default 0;\n    include ip.conf;\n}\n// geo 指令主要是可以根据指定变量的值映射出一个新变量。如果不指定变量，默认为$remote_addr\n")])])]),e("p",[n._v("为匹配项做白名单配置")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("server {\n    location / {\n        if ( $ip_whitelist = 0 ){\n            return 403; //不在白名单返回 403\n        }\n        index index.html;\n        root /tmp;\n    }\n}\n")])])]),e("ul",[e("li",[e("strong",[n._v("适配PC与移动环境")])])]),n._v(" "),e("p",[n._v("当用户从移动端打开PC端baidu.com的场景时，将自动跳转指移动端m.baidu.com，本质上是Nginx可以通过内置变量$http_user_agent，获取到请求客户端的userAgent，从而知道当前用户当前终端是移动端还是PC，进而重定向到H5站还是PC站")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("server {\n location / {\n      //移动、pc设备agent获取\n      if ($http_user_agent ~* '(Android|webOS|iPhone)') {\n          set $mobile_request '1';\n      }\n      if ($mobile_request = '1') {\n          rewrite ^.+ http://m.baidu.com;\n      }\n  }\n}\n")])])]),e("ul",[e("li",[e("strong",[n._v("配置gzip")])])]),n._v(" "),e("p",[n._v("开启Nginx gzip，压缩后,静态资源的大小会大大的减少,从而可以节约大量的带宽,提高传输效率,带来更好的响应和体验")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('server{\n    gzip on; //启动\n    gzip_buffers 32 4K;\n    gzip_comp_level 6; //压缩级别，1-10，数字越大压缩的越好\n    gzip_min_length 100; //不压缩临界值，大于100的才压缩，一般不用改\n    gzip_types application/javascript text/css text/xml;\n    gzip_disable "MSIE [1-6]\\."; // IE6对Gzip不友好，对Gzip\n    gzip_vary on;\n}\n')])])]),e("ul",[e("li",[e("strong",[n._v("Nginx配置跨域请求")])])]),n._v(" "),e("p",[n._v("当出现403跨域错误的时候，还有 No 'Access-Control-Allow-Origin' header is present on the requested resource报错等，需要给Nginx服务器配置响应的header参数：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("location / {\n    add_header Access-Control-Allow-Origin *;\n    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';\n    add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';\n\n    if ($request_method = 'OPTIONS') {\n        return 204;\n    }\n}\n")])])]),e("h2",{attrs:{id:"如何使用nginx"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何使用nginx"}},[n._v("#")]),n._v(" "),e("strong",[n._v("如何使用Nginx")])]),n._v(" "),e("p",[n._v("通过在本地使用Nginx，从启动、更改、重启等环节来介绍Nginx的基本使用")]),n._v(" "),e("ul",[e("li",[n._v("如何启动 sudo nginx")]),n._v(" "),e("li",[n._v("修改nginx.conf 配置 (具体看你配置位置)vim /usr/local/etc/nginx/nginx.conf")]),n._v(" "),e("li",[n._v("检查语法是否正常 sudo nginx -t")]),n._v(" "),e("li",[n._v("重启nginx sudo nginx -s reload")]),n._v(" "),e("li",[n._v("创建软链接(便于管理多应用nginx)")])]),n._v(" "),e("p",[n._v("当我们需要管理多个网站的nginx，nginx文件放在一起是最好的管理方式，一般都存在/nginx/conf.d/，我们需要把配置文件丢到 /etc/nginx/conf.d/ 文件夹下，怎样才能使这个配置文件既在程序文件夹下，又在 /etc/nginx/conf.d/文件夹下呢？")]),n._v(" "),e("p",[n._v("假如我们在程序文件夹下有一个 ngxin 配置文件：/home/app/app.nginx.conf 我们需要给这个文件创建一个软链接到 /etc/nginx/conf.d/ 下：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("ln -s /home/app/app.example.com.nginx.conf /etc/nginx/conf.d/app.nginx.conf\n")])])]),e("p",[n._v("这样操作之后，当我们改应用配置文件，/etc/nginx/conf.d/ 下与之对应的配置文件也会被修改，修改后重启 nginx 就能够使新的 ngxin 配置生效了。")])])}),[],!1,null,null,null);e.default=a.exports}}]);